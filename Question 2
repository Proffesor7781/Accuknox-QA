# System health monitoring

import psutil
import logging
from datetime import datetime

# Configure logging
logging.basicConfig(filename='system_health.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Thresholds
CPU_THRESHOLD = 80  # in percentage
MEMORY_THRESHOLD = 80  # in percentage
DISK_THRESHOLD = 80  # in percentage

def check_cpu_usage():
    usage = psutil.cpu_percent(interval=1)
    if usage > CPU_THRESHOLD:
        logging.warning(f'High CPU usage detected: {usage}%')
    return usage

def check_memory_usage():
    memory = psutil.virtual_memory()
    usage = memory.percent
    if usage > MEMORY_THRESHOLD:
        logging.warning(f'High Memory usage detected: {usage}%')
    return usage

def check_disk_usage():
    disk = psutil.disk_usage('/')
    usage = disk.percent
    if usage > DISK_THRESHOLD:
        logging.warning(f'High Disk usage detected: {usage}%')
    return usage

def check_running_processes():
    processes = len(psutil.pids())
    return processes

def main():
    print("System Health Monitoring Script Started")
    while True:
        cpu = check_cpu_usage()
        memory = check_memory_usage()
        disk = check_disk_usage()
        processes = check_running_processes()

        print(f"CPU Usage: {cpu}%")
        print(f"Memory Usage: {memory}%")
        print(f"Disk Usage: {disk}%")
        print(f"Running Processes: {processes}")

        logging.info(f"CPU Usage: {cpu}%")
        logging.info(f"Memory Usage: {memory}%")
        logging.info(f"Disk Usage: {disk}%")
        logging.info(f"Running Processes: {processes}")

        # Check every 60 seconds
        time.sleep(60)

if __name__ == "__main__":
    main()


#Automated Backup Solution

import subprocess
import logging
from datetime import datetime

# Configure logging
logging.basicConfig(filename='backup.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Source and destination directories
SOURCE_DIR = '/path/to/source/directory'
REMOTE_USER = 'remote_user'
REMOTE_HOST = 'remote_host'
REMOTE_DIR = '/path/to/remote/directory'

def run_backup():
    try:
        # Run rsync command
        result = subprocess.run(['rsync', '-avz', SOURCE_DIR, f'{REMOTE_USER}@{REMOTE_HOST}:{REMOTE_DIR}'],
                                check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        # Log success
        logging.info(f'Backup successful: {result.stdout.decode()}')
        print("Backup successful")
    except subprocess.CalledProcessError as e:
        # Log failure
        logging.error(f'Backup failed: {e.stderr.decode()}')
        print("Backup failed")

def main():
    print("Automated Backup Script Started")
    run_backup()

if __name__ == "__main__":
    main()
